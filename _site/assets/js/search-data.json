{
  
  "1": {
    "title": "About",
    "content": "Introduction . The Matterport 3D Showcase SDK is a Javascript library for third-party developers to integrate Matterport with their web application. Developers can deeply customize the 3D Showcase experience and build entire applications off of Matterport, enabling many exciting new use cases. . With the SDK, developers can: . Execute actions to control 3D Showcase from their web app. For example, the user clicks a button on a webpage and moves to a specific location in the Matterport Space. | Listen to events from 3D Showcase and respond in their web app. For example, play a sound or voiceover when the user goes to a certain location in the Matterport Space. | . The SDK does not have all the same actions and events that an end-user can do in 3D Showcase. We are building out the SDK based on demand. .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/about/",
    "relUrl": "/docs/about/"
  }
  ,"2": {
    "title": "Concepts",
    "content": "Concepts . Introduction . With the Matterport 3D Showcase SDK, your web application (web app) can execute actions that change where the end user is and what they see in 3D Showcase. . You can also let end users explore spaces with 3D Showcase naturally. Your web app can listen to events about where the user is and what they are seeing or doing, and then react appropriately. . Your web app can both execute actions and listen to events. Depending on the purpose of your web app, you will typically only do one or the other. . Finally, you can also use metadata about the entire Matterport Space so your web app can make informed decisions about the entire space. . Simple Message Flow with the 3D Showcase SDK . If you’re having problems running 3D Showcase, it may be a problem with WebGL. Review our system requirements for 3D Showcase. Coordinate Conventions . X, Y, and Z coordinates are from the viewpoint of the Matterport camera when it scanned the environment. . To make it easier to visualize, pretend the Matterport camera is a “human” and the Matterport camera lenses are his or her “eyes.” The buttons on the back of the Matterport Camera back are like the back of a person’s head. . Then, coordinate conventions are easier to describe relative to how the imaginary ‘camera-person’ moves: . . This diagram is shown relative to the current camera&#39;s position and orientation. . Another way to visualize the coordinate system is from the Floorplan View. This is the same as a “birds-eye” top-down view. . . The floorplan is an absolute position of the Matterport Camera within the Space when it scanned. . The orientation of the Floorplan View depends on the original orientation of the pano that you transitioned from and the aspect ratio of the window. . The coordinate system is centered around the first pano that was scanned. This may be different from your Start Position. . To find the first scan, find the space in my.matterport.com and then launch Workshop. . . Open the 3D Scans &amp; 360º Views menu. Double click on Scan 1 and you will be transported to that scan position. .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/concepts/",
    "relUrl": "/docs/concepts/"
  }
  ,"3": {
    "title": "Creating mattertags",
    "content": "Creating Mattertags . The Mattertag.add function takes a single or an array of MattertagDescriptor objects. The following properties are supported by MattertagDescriptor: . Property Required Description . anchorPosition | yes | The mattertag anchor, It is typically attached to a surface on the matterport model. | . stemVector | yes | The mattertag stem. It’s length determines how far it will be offset from the anchor position. | . color | no | The color of the disc. | . description | no | The mattertag description. Links can be included in the description. | . label | no | The mattertag label. | . mediaType | no | The mediaSrc type. This can be photo, video, or rich media. This property must be set to display the media source. | . mediaSrc | no | A url to the media. The urls must be supported by embed.ly | . Mattertag Properties . To find an anchor position and stemVector for your model, you can use the Intersection Inspector Tool . Adding a mattertag with a label and no stem . var mattertagDesc = { label: &#39;Hello Mattertag&#39;, anchorPosition: { x: 1.39, y: 2.00, z: -0.122 }, stemVector: { x: 0, y: 0, z: 0 } }; sdk.Mattertag.add(mattertagDesc).then(function(mattertagId) { console.log(mattertagId); // output: TODO }); . Adding multiple mattertags at once . var mattertags = [{ label: &#39;Tag 1&#39;, anchorPosition: { x: 0, y: 0, z: 0}, stemVector: { x: 0, y: 0, z: 0} },{ label: &#39;Tag 2&#39;, description: &#39;&lt;3 this tag!&#39;, anchorPosition: { x: 1, y: 0, z: 0 }, stemVector: { x: 0, y: 0.5, z: 0} }]; sdk.Mattertag.add(mattertags).then(function(mattertagIds) { console.log(mattertagIds); // output: TODO }); .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/guides/creating_mattertags/",
    "relUrl": "/docs/guides/creating_mattertags/"
  }
  ,"4": {
    "title": "Editing the mattertag billboard",
    "content": ". Adding a link to the description | Setting an image media source | Setting a video media source | Adding a link to the description . The description supports the following markdown link format: . [link text](link url) . The following code snippets produces the image below it. . sdk.Mattertag.editBillboard(mattertagSid, { description:&quot;[Link to Matterport site!](https://www.matterport.com)&quot;, }); . . Setting an image media source . We use embedly to present image media. We recommend that you verify your image url with the embedly explore display tool before setting it as a media source. . Select your image url. For example we will use, | . url: https://static.matterport.com/mp_cms/media/filer_public/71/ca/71cabc75-99a5-41a4-917c-f45203f9254e/pro-21f8ddbae.png . . Verify your image is displayed correctly on the embedly explore display tool | . . Call Mattertag.editBillboard with the media source to update the billboard | . sdk.Mattertag.editBillboard(mattertagSid, { media: { type: sdk.Mattertag.MediaType.PHOTO, src: &#39;https://static.matterport.com/mp_cms/media/filer_public/71/ca/71cabc75-99a5-41a4-917c-f45203f9254e/pro-21f8ddbae.png&#39;, }); . . Setting a video media source . We use embedly to present video media. We recommend that you verify your video url with the embedly explore embed tool before setting it as a media source. . Select your video url. For example we will use, | . url: https://www.youtube.com/watch?v=uO_x9TFNmTk . . Verify your video is displayed correctly on the embedly explore embed tool | . . Call Mattertag.editBillboard with the media source to update the billboard | . sdk.Mattertag.editBillboard(mattertagSid, { media: { type: sdk.Mattertag.MediaType.VIDEO, src: &#39;https://www.youtube.com/watch?v=uO_x9TFNmTk&#39;, }); . .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/guides/editing_mattertag_billboard/",
    "relUrl": "/docs/guides/editing_mattertag_billboard/"
  }
  ,"5": {
    "title": "Examples",
    "content": "Examples . See what’s possible with the Matterport 3D Showcase SDK. . Name Author Description . Showcase Replicator | Matterport | This app replicates all possible 3D Showcase actions in simple UI buttons. Uses 3D Showcase SDK v1.1 | . Matterport SDK ‘Kitchen Sink’ Debugger | Chris Hickman, Metroplex360 | This “Hello World” style app similarly replicates all possible actions while also showing debug outputs to aid in development. For 3D Showcase SDK v3.0. | . Intersection Inspector | Matterport | This tool can be used to get world space osition and normal of the model mesh.p | .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/examples/",
    "relUrl": "/docs/examples/"
  }
  ,"6": {
    "title": "Guides",
    "content": "",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/guides/",
    "relUrl": "/docs/guides/"
  }
  ,"7": {
    "title": "Home",
    "content": "Getting Started . Installation | About the showcase embed SDK | . Updates . 12-9-2019 . Transient Mattertags, synchronous functions, and more! Update both sdk and sdk client versions. See Releases Notes . Latest Versions . SDK Version * | 3.2 | . SDK Client Version ** | 2.0.0 | . Last Updated | Dec 9, 2019 | . *Where to specify the SDK version, Connect to a space . **What is the SDK Client? SDK Client . **How to specify the SDK Client version, include the library .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/",
    "relUrl": "/docs/"
  }
  ,"8": {
    "title": "Installation",
    "content": "Installation . Usage of the SDK constitutes your agreement with the Matterport SDK Agreement. Email developers@matterport.com with any questions. Include the Library and Add a Matterport Space . First, add the 3D Showcase SDK to your web application by including the Javascript library. This line goes in the &lt;head&gt; tag with your other includes. . &lt;script src=&#39;https://static.matterport.com/showcase-sdk/2.0.0-0-g7edd6b8/sdk.js&#39;&gt; . Next, embed a Matterport Space on your web page with an &lt;iframe&gt; tag. Learn more about embedding. . Add the &amp;play=1 URL parameter to automatically load the &lt;iframe&gt; when the page loads for a better user experience. Give it an ID you will use later. . &lt;iframe width=”853” height=”480” src=”https://my.matterport.com/show?m=SxQL3iGyoDo&amp;play=1” frameborder=”0” allowfullscreen allow=&quot;vr&quot; id=”showcase_iframe”&gt;&lt;/iframe&gt; . Connect to the Matterport Space . Now in the Javascript code for your web application, connect to the Matterport Space. . You’ll want to wait until the &lt;iframe&gt; containing the Matterport Space loads. Connecting happens after you’ve included the SDK library. . var iframe = document.getElementById(&#39;showcase_iframe&#39;); iframe.addEventListener(&#39;load&#39;, showcaseLoader, true); function showcaseLoader() { try { window.MP_SDK.connect( iframe, // Obtained earlier &#39;abc123456789&#39;, // Your API key &#39;3.1&#39; // SDK version you are using // Use the latest version you can for your app ) .then(loadedShowcaseHandler) .catch(handleError); } catch (e) { console.error(e); } }; . Parameter Description . showcase_iframe | The value you put for the the id parameter in the &lt;iframe&gt; tag earlier. | . applicationKey | Your API key is unique to your website domain. Contact developers@matterport.com to get your API key. Your API key is limited to your website’s domain (example.com) and will not work with subdomains (something.example.com). | . For local development, you’ll need to run your app off a local web server. We recommend using a NodeJS server. Control 3D Showcase with Actions . Now you’ll want to make an action for 3D Showcase to execute. In the code for your web application, add this to a Javascript function where desired. Refer to the reference docs for a list of all the actions you can do. . showcase.&lt;action&gt;(&lt;arguments&gt;).then(successCallback) .catch(errorCallback); // ... // What to do if action was successful function successCallback(message) { console.log(message); } // What to do if the action failed function errorCallback(err) { console.error(err); } . Parameter Description . &lt;action&gt; | The action you want 3D Showcase to do. | . &lt;arguments&gt; | The arguments for that action. | . Listen to Events from 3D Showcase . Listening for events from 3D Showcase is done in a similar way. . showcase.on(&lt;event_name&gt;, function (&lt;state_arguments&gt;) { // what to do when this event happens }); . Parameter Description . &lt;event_name&gt; | Event you’re listening for | . &lt;state_arguments&gt; | Return values related to this event. These tell you about the new state of 3D Showcase after this event has happened. | . Use the Metadata . Finally, you can grab metadata about the entire Matterport Space by calling getModelData() and getModelDetails() in your web app. For example: . mpSdk.Model.getModelData() .then(function(model) { // Model data successfully retrieved console.log(&#39;Model sid:&#39; + model.sid); }) .catch(function(error) { // Problem retrieving model data }); . Metadata is only available after you have successfully connected to the Matterport Space. .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/installation/",
    "relUrl": "/docs/installation/"
  }
  ,"9": {
    "title": "Intersection Inspector",
    "content": ". Intersection Inspector Setting up a model in the intersection inspector | Using the intersection inspector | Examine the code | | Intersection Inspector . You can use this tool to inspect the surfaces of a model. It is a jsfiddle application located here, http://jsfiddle.net/guillermo_matterport/pftnhkuc . Setting up a model in the intersection inspector . Go to this jsfiddle editor link Editor You can also select Edit in JSFiddle at the bottom of this page. | Select Fork to create your own copy of the application. | . . Set your model sid. Look for the modelSid variable. | . . Run your updated application. You should see your model loaded in the Results pane. | . . Using the intersection inspector . Load the application after you have setup your model. | Navigate to the location on the model that you would like to inspect. | Place the mouse over the area of interest and stop moving it. You should see a button pop up right over the mouse. If you move the mouse outside the area of the button, it will disappear. | . . Click the button and look at the upper left of the showcase window. You will see the 3D position and normal for the point you clicked. | . . Copy the position and normal text. You can use the position value to set the mattertag anchor position and normal value to set the stem. | . Examine the code .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/examples/intersection-inspector/",
    "relUrl": "/docs/examples/intersection-inspector/"
  }
  ,"10": {
    "title": "Legal",
    "content": "Matterport SDK Agreement .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/legal/",
    "relUrl": "/docs/legal/"
  }
  ,"11": {
    "title": "Reference",
    "content": "Reference . Embed SDK . 3.2 (current) | 3.1 | . Explore the Reference Docs . We’ve organized our SDK reference docs around modules (features) within 3D Showcase. If you’re new to the SDK docs, here’s a short description of each module. . Name Description . Globals | Things related to the entire SDK, including subscribing (listening) and unsubscribing to events. | . Camera | The end-user’s view and what they currently see. | . Floor | How many floors in space and moving between floors. | . Mattertag | Get and read content from Mattertag™ Posts. | . Mode | Related to the end-user’s current viewing mode (Dollhouse, Floorplan, Inside View, etc) | . Model | Related to the metadata of the Matterport Space as a whole | . Sweep | Moving to a specific sweep/pano within the entire space | . Tour | Related to the Highlight Reel and Guided Tour functionality | . Within each module, the reference docs are organized in this way: . Enumerations - Typically these are events that you can listen to. Enums also include values of specific parameters for your actions. | Types - Definitions of objects and the primitives that they contain. These objects are used in the actions below. | Functions - Actions you can execute. Actions typically show the user something new or otherwise change the state of 3D Showcase. | .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/reference/",
    "relUrl": "/docs/reference/"
  }
  ,"12": {
    "title": "3.1",
    "content": "SDK 3.1 Additions (08-20-2019) . We are introducing observables to the SDK, email us at developer@matterport.com with your feedback.. The additions that follow will likely change over the next couple of weeks depending on feedback. . We will be adding two observable properties, Camera.pose and Pointer.intersection. . Observables . Each observable property will have a subscribe function that will initiate observable callbacks. | The subscribe function returns a subscription. The subscription is used to stop observable callbacks. | Observable callbacks are triggered when a state change is detected. | If the data is available, any new subscribe callbacks will be triggered immediately. Otherwise, you will be called back when the data becomes available. | . Added Camera.pose observable property . This observable calls you back whenever the camera pose changes. The type of the pose property is the same as the one returned from Camera.getPose() . Reference: Camera.Pose . Usage: . var sub = mpSdk.Camera.pose.subscribe(function(pose){ console.log(&quot;positions: &quot;, pose.position); console.log(&quot;rotation: &quot;, pose.rotation); }); // When you no longer need the callback, unsubscribe from the observable. sub.cancel(); . Added Pointer.intersection observable property . The Pointer namespace is new and refers to properties and functions referring to the users pointing device, e.g. mouse, touchpad, or stylus. The intersection observable provides you with details of the 3D surface that is under the pointer. This observable calls you back when the intersection under the pointer changes. . Usage: . var sub = mpSdk.Pointer.intersection.subscribe(function(intersection){ console.log(&quot;normal: &quot;, intersection.normal); console.log(&quot;object: &quot;, intersection.object); console.log(&quot;position: &quot;, intersection.position); }); // When you no longer need the callback, unsubscribe from the observable. sub.cancel(); . intersection.object is one of the following values: . Value Description . mpSdk.Pointer.Colliders.NONE | No intersectable geometry. | . mpSdk.Pointer.Colliders.MODEL | Intersects the model. | . mpSdk.Pointer.Colliders.SWEEP | Intersects a sweep puck. | . mpSdk.Pointer.Colliders.TAG | Intersects a mattertag. | . mpSdk.Pointer.Colliders.UNKNOWN | Intersects unclassified geometry. | . Accessing the new functionality . Changes were made to the sdk client file to support observables. You will need to update your reference to that file as follows, &lt;script src=&quot;https://static.matterport.com/showcase-sdk/1.2.0-31-g16b6637/sdk.js&quot;&gt;&lt;/script&gt; | You will need to request an updated interface version when connecting to the showcase iframe. Use 3.1 as follows, window.MP_SDK.connect(showcaseIframe, &#39;YOUR APPLICATION KEY&#39;, &#39;3.1&#39;).then(function(sdk) { }); . | See the observables in action, Showcase JsFiddle . Open the javascript console to see the output. .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/releases/release_3.1/",
    "relUrl": "/docs/releases/release_3.1/"
  }
  ,"13": {
    "title": "3.2",
    "content": "SDK 3.2 Additions (11-22-2019) . New Features . Transient Matterags – Create mattertags using the sdk. | Synchronous Functions – PLACEHOLDER | . Transient mattertags . Transient mattertags are mattertags created through the SDK. These mattertags behave just like regular mattertags with one exception, they are temporary. They will need to be recreated during each user session. . Adding a transient mattertag . The Reference: Mattertag.add function takes a single or an array of MattertagInput objects. The following properties are supported by MattertagInput: . Property Required Description . anchorPosition | yes | The mattertag anchor, It is typically attached to a surface on the matterport model. | . stemVector | yes | The mattertag stem. It’s length determines how far it will be offset from the anchor position. | . color | no | The color of the disc. | . description | no | The mattertag description. Links can be included in the description. | . label | no | The mattertag label. | . mediaType | no | The mediaSrc type. This can be photo, video, or rich media. This property must be set to display the media source. | . mediaSrc | no | A url to the media. The urls must be supported by embed.ly | . Mattertag Properties . Adding a mattertag with a label and no stem . var mattertagDesc = { label: &#39;Hello Mattertag&#39;, anchorPosition: { x: 1.39, y: 2.00, z: -0.122 }, stemVector: { x: 0, y: 0, z: 0 } }; sdk.Mattertag.add(mattertagDesc).then(function(mattertagId) { console.log(mattertagId); // output: TODO }); . Adding multiple mattertags at once . var mattertags = [{ label: &#39;Tag 1&#39;, anchorPosition: { x: 0, y: 0, z: 0}, stemVector: { x: 0, y: 0, z: 0} },{ label: &#39;Tag 2&#39;, description: &#39;&lt;3 this tag!&#39;, anchorPosition: { x: 1, y: 0, z: 0 }, stemVector: { x: 0, y: 0.5, z: 0} }]; sdk.Mattertag.add(mattertags).then(function(mattertagIds) { console.log(mattertagIds); // output: TODO }); . Updating a mattertag . You can edit the title, description, and media for both transient and regular mattertags by calling Reference: Mattertag.edit . Finding an anchor position and stem direction for a mattertag . Adding a link to the mattertag description . Adding media to a mattertag. . Synchronous functions .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/releases/release_3.2/",
    "relUrl": "/docs/releases/release_3.2/"
  }
  ,"14": {
    "title": "Release Notes",
    "content": "v3.2 . Dec 9, 2019 . Transient Mattertags Support for creating, updating and deleting mattertags. Changes to mattertags disappear once the user leaves showcase. Added Mattertag.add, Mattertag.editColor, Mattertag.editBillboard, Mattertag.editPosition, and Mattertag.remove See Guides section for help on editing transient mattertag content. | Synchronous Functions We are adding support for synchronous functions. These functions compute and return your data immediately, no promise involved. In general, synchronous functions are more performant since they dont directly interact with the showcase. Use them when you can. To start, we have selected a function that is called frequently Renderer.getScreenPosition(). This function is now being deprecated, and the new synchronous function is Renderer.worldToScreen(). In order to use synchronous functions, you will need to update your sdk client reference to https://static.matterport.com/showcase-sdk/2.0.0-0-g7edd6b8/sdk.js | Added Mattertag.getDiscPosition synchronous function. | Deprecating window.SHOWCASE_SDK, use window.MP_SDK instead. | Update your iframe links. We are no longer using /showcase-beta in the iframe link, use /show e.g. https://my.matterport.com/show?m=SxQL3iGyoDo&amp;play=1. See Installation | . v3.1 . Aug 22, 2019 . Added Camera.pose observable property. | Camera.getPose() is now deprecated. It will be removed in a future update. | Added Pointer namespace and Pointer.intersection observable property | Recommended SDK Client version updated to: https://static.matterport.com/showcase-sdk/1.2.0-31-g16b6637/sdk.js | . v3.0.12.25 . May 3, 2019 . Added colors and anchor points Mattertag.MattertagData | . v3.0.12.18 . April 25, 2019 . Added Measurements.getData(). You can now access measurements created from Workshop! | Added App.getLoadTimes(). You can now access app phase timing information! | Added transition type parameter to Mattertag.navigateToTag() | Removed Mattertag.ActiveMattertagData type | Removed Mattertag.Event.UPDATE | Added projection property to Camera.getPose() | Added optional includeHiddenFloors parameter to Renderer.getWorldPositionData() | Added Renderer.takeEquirectangular() | . v3.0.3.35 . June 27, 2018 . New actions on camera, new namespaces for Renderer, and Settings | Recommended SDK Client version updated to: https://static.matterport.com/showcase-sdk/1.2.0-0-g1d0799d/sdk.js | See a list of modified endpoints. | . v3.0.0.196 . February 12, 2018 . Renamed toggle() to setActive() | Renamed MattertagPositionData to ActiveMattertagData | Removed HoverState event, redundant with Event.HOVER | Removed SelectedState event, use Event.CLICK instead` | Renamed getMattertagData to getData | Removed BoardState enum. | Added MattertagData.isActive property | Added TagDescriptionChunkType enum | Added TagMediaType enum | Added LinkType enum | Removed MattertagData.floorIndex property | Removed MattertagData.mode property | Removed MattertagData.color property | Removed MattertagData.anchorPosition property | Removed MattertagData.stemVector property | Renamed SweepInfo.newPano to SweepInfo.newSweep | Renamed SweepInfo.oldPano to SweepInfo.oldSweep | Removed ModelData.panos property | Removed SweepData.modelSupportsVr property | Removed SweepData.neighbourUUIDs property | Removed SweepData.thumbnail property | Renamed getModelData() to getData() | Renamed getModelDetails() to getDetails()` | Renamed ModelDetails.contact_email to ModelDetails.contactEmail | Renamed ModelDetails.contact_name to ModelDetails.contactName | Renamed ModelDetails.formatted_address to ModelDetails.formattedAddress | Renamed ModelDetails.formatted_contact_phone to ModelDetails.formattedContactPhone | Renamed Pose.pano to Pose.sweep | Removed rotateInDirection() function | Removed Event.CHANGE event | Renamed Event.PLAYING to Event.PHASE_CHANGE | . v3.0 . December 4, 2017 . New actions and events on floors, labels, and Mattertag™ Posts. | New set of reference content that covers all actions and events. | Version 1.x no longer supported. Version 2.0 skipped. | See a list of modified endpoints. | . v1.1 . August 10, 2017 . Added getPose and takeScreenShot actions. | Added pano thumbnails from the default pose into the metadata. | . v1.0 . February 16, 2017 . Initial release of SDK. Focus on movement and the user’s location in the space. | .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/release_notes/",
    "relUrl": "/docs/release_notes/"
  }
  ,"15": {
    "title": "Upgrading",
    "content": "Upgrading from v3.0 to v3.0.3.35 . Changes . Version 3.0 Version 3.0.3.35 . Camera.takeScreenshot() | Renderer.takeScreenshot() | . Sweep.alignment changes to Sweep.alignmentType Sweep.floor added to the Sweep definition Sweep.placementType added to differentiate a sweep aligned by a user, and a sweep aligned space processing Mode.Transition has an enum of transition styles (Instant/blackout etc) . New Functionality . Version 3.0.3.35 Camera.lookAtScreenCoords Renderer.getScreenPosition Renderer.getWorldPositionData Renderer.takeScreenshot Settings.get Settings.update . Upgrading from v1.1 to v3.0 . In version 3.0 of the SDK, we refactored our code into modules that are easier for us to maintain. As a result, some of the endpoints have changed from version 1.1. We’ve listed what’s changed below. . Actions . Version 1.1 Version 3.0 . moveToMode() | Mode.moveTo() | . moveToPano() | Sweep.moveTo() | . rotate() | Camera.rotate() | . rotateDirection() | Camera.rotateInDirection() | . panCamera() | Camera.pan() | . moveInDirection() | Camera.moveInDirection() | . getPose() | Camera.getPose() | . takeScreenshot() | Camera.takeScreenshot() | . Events . Version 1.1 Version 3.0 . Event.ENTER_PANO | Sweep.Event.ENTER | . Event.MOVE | Deprecated | . Event.MODEL_LOADED | Model.Event.MODEL_LOADED | . We&#39;ve skipped SDK version 2.0 so the SDK version number and the end-user (web player) version number are the same. . Return to the main page .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/upgrade/",
    "relUrl": "/docs/upgrade/"
  }
  ,"16": {
    "title": "Vocabulary",
    "content": "Vocabulary . Term Definition . SDK Client | An object that sits on the window object of the page containing the showcase embed, window.MP_SDK . This object is used to make a connection to the sdk.The client is loaded and initialized by executing the sdk client script, https://static.matterport.com/showcase-sdk/2.0.0-0-g7edd6b8/sdk.jsIn the example link above, the sdk client version is 2.0.0See Installation for instructions on how to load the sdk client. | . Pano or Sweep | Short for panorama. A spot in the Matterport Space where a user can stand and look around. Also called a ‘sweep’ as in a full Matterport camera rotation.This includes 3D scan locations (panos aligned to each other) and 360º Views (unaligned panos).A pano is the 2D visual data. This is different from 3D mesh data that the user sees in Dollhouse and Floorplan View. | . UUID | Unique Universal ID. This is used to identify a single pano among the many panos in a Matterport Space. | . Position | Absolute position (X, Y, and Z coordinates) of the pano within the Matterport Space. Learn more about the coordinate conventions. | . Transition | Transitions are what the user sees when they move from one pano to another. Transitions can be: 1) Fly-through — Flies from pano to pano inside the 3D Space. 2) Fade — Fades to black in between panos. This gives a more “slideshow” type of feeling. 3) Instant — Immediately switches from one pano to another without any transition. | . Mode | The user’s current view in 3D Showcase. It can be one of five possible modes:1) Inside View (aligned pano) 2) 360º View or Outside View (unaligned pano) 3) Dollhouse View 4) Floorplan View 5) Transitioning between different modes. | .",
    "url": "http://localhost:4000/pages/matterport/showcase-sdk-site-preview/docs/vocabulary/",
    "relUrl": "/docs/vocabulary/"
  }
  
}